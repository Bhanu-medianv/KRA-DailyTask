// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.7.5
//   protoc               v4.23.3
// source: event.proto

/* eslint-disable */
import type { Metadata } from "@grpc/grpc-js";
import { GrpcMethod, GrpcStreamMethod } from "@nestjs/microservices";
import { Observable } from "rxjs";

export interface CreateEventDto {
  title: string;
  description: string;
  date: string;
}

export interface Event {
  id: number;
  title: string;
  description: string;
  date: string;
}

export interface Empty {
}

export interface EventId {
  id: number;
}

export interface UpdateEventDto {
  id: number;
  title: string;
  description: string;
  date: string;
}

export interface EventList {
  events: Event[];
}

export interface EventServiceClient {
  createEvent(request: CreateEventDto ,metadata: Metadata, ...rest: any): Observable<Event>;

  findOne(request: EventId, metadata: Metadata, ...rest: any): Observable<Event>;

  findAll(request: Empty, metadata: Metadata, ...rest: any): Observable<EventList>;

  update(request: UpdateEventDto, metadata: Metadata, ...rest: any): Observable<Event>;

  delete(request: EventId, metadata: Metadata, ...rest: any): Observable<Empty>;
}

export interface EventServiceController {
  createEvent(request: CreateEventDto, metadata: Metadata, ...rest: any): Promise<Event> | Observable<Event> | Event;

  findOne(request: EventId, metadata: Metadata, ...rest: any): Promise<Event> | Observable<Event> | Event;

  findAll(request: Empty, metadata: Metadata, ...rest: any): Promise<EventList> | Observable<EventList> | EventList;

  update(request: UpdateEventDto, metadata: Metadata, ...rest: any): Promise<Event> | Observable<Event> | Event;

  delete(request: EventId, metadata: Metadata, ...rest: any): Promise<Empty> | Observable<Empty> | Empty;
}

export function EventServiceControllerMethods() {
  return function (constructor: Function) {
    const grpcMethods: string[] = ["createEvent", "findOne", "findAll", "update", "delete"];
    for (const method of grpcMethods) {
      const descriptor: any = Reflect.getOwnPropertyDescriptor(constructor.prototype, method);
      GrpcMethod("EventService", method)(constructor.prototype[method], method, descriptor);
    }
    const grpcStreamMethods: string[] = [];
    for (const method of grpcStreamMethods) {
      const descriptor: any = Reflect.getOwnPropertyDescriptor(constructor.prototype, method);
      GrpcStreamMethod("EventService", method)(constructor.prototype[method], method, descriptor);
    }
  };
}

export const EVENT_SERVICE_NAME = "EventService";
